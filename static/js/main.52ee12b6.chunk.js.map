{"version":3,"sources":["logo.svg","component/BackendTest.jsx","component/Swiper.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","require","BackendTest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","signupResult","loginResult","saveEntryResult","getEntriesResul","baseURL","signupTest","bind","assertThisInitialized","loginTest","saveEntryTest","getEntriesTest","email","username","password","_this2","url","concat","get","then","res","data","setState","catch","err","console","log","_this3","results","length","JSON","stringify","entry","time","longitude","latitude","_this4","_this5","setEntries","_this6","react_default","a","createElement","type","onKeyUp","e","target","value","onClick","Component","Swiper","ready","key","entries","map","x","className","lib_default","App","arguments","undefined","component_BackendTest","component_Swiper","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.52ee12b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nconst axios = require('axios');\n// https://backend-services.herokuapp.com/journalRoot/\n// signup?email=test2@test.com&username=test2&password=test2\n// login?email=test%201%20email&username=test%201%20username&password=test%201%20password\n// saveEntry?email=tes%201%20email&username=test%201%20username&entry=test%20entry&time=now&longitude=1&latitude=1\n// getEntries?email=test%202%20email&username=test%202%20username\nclass BackendTest extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = \n        {\n            signupResult:'',\n            loginResult:'',\n            saveEntryResult:'',\n            getEntriesResul:''\n        };\n        this.baseURL = 'https://backend-services.herokuapp.com/journalRoot/';\n        this.signupTest = this.signupTest.bind(this);\n        this.loginTest = this.loginTest.bind(this);\n        this.saveEntryTest = this.saveEntryTest.bind(this);\n        this.getEntriesTest = this.getEntriesTest.bind(this);        \n    }\n    signupTest(email,username,password)\n    {\n        // signup?email=test2@test.com&username=test2&password=test2\n        // result expected: \"sucess\"\n        let url = this.baseURL + `signup?email=${email}&username=${username}&password=${password}`;\n        //console.log(url);\n        axios.get(url)\n        .then( (res) =>\n        {\n            //console.log(res);\n            if( res.data == 'sucess')\n            {\n                this.setState({signupResult:res.data})\n            }\n        })\n        .catch( (err) =>\n        {\n            console.log(err);\n        })\n        .then( () =>\n        {\n            //console.log('done');\n        });\n    }\n    loginTest(email,username,password)\n    {\n        // login?email=test%201%20email&username=test%201%20username&password=test%201%20password\n        let url = this.baseURL + `login?email=${email}&username=${username}&password=${password}`;\n        //console.log(url);\n        axios.get(url)\n        .then( (res) =>\n        {\n            //console.log(res.data.results);\n            if( res.data.results.length > 0)\n            {\n                \n                this.setState({loginResult:JSON.stringify(res.data.results)})\n            }\n        })\n        .catch( (err) =>\n        {\n            console.log(err);\n        })\n        .then( () =>\n        {\n            //console.log('done');\n        });\n    }\n    saveEntryTest(email,username,entry,time,longitude,latitude)\n    {\n        // saveEntry?email=tes%201%20email&username=test%201%20username&entry=test%20entry&time=now&longitude=1&latitude=1\n        let url = this.baseURL + `saveEntry?email=${email}&username=${username}&entry=${entry}&time=${time}&longitude=${longitude}&latitude=${latitude}`;\n        //console.log(url);\n        axios.get(url)\n        .then( (res) =>\n        {\n            //console.log(res);\n            if( res.data == 'sucess')\n            {\n                \n                this.setState({loginResult:res.data});\n            }\n        })\n        .catch( (err) =>\n        {\n            console.log(err);\n        })\n        .then( () =>\n        {\n            //console.log('done');\n        });\n    }\n    getEntriesTest(email,username)\n    {\n        // getEntries?email=test%202%20email&username=test%202%20username\n        let url = this.baseURL + `getEntries?email=${email}&username=${username}`;\n        //console.log(url);\n        axios.get(url)\n        .then( (res) =>\n        {\n            //console.log(res.data.results);\n            if( res.data )\n            {\n                this.setState({loginResult:JSON.stringify(res.data.results)});\n                this.props.setEntries(res.data.results);\n            }\n        })\n        .catch( (err) =>\n        {\n            console.log(err);\n        })\n        .then( () =>\n        {\n            //console.log('done');\n        });\n    }\n    render() \n    {\n        //console.log(this.props);\n        let email, username, password, entry, time,longitude, latitude;\n        return (\n            <div>\n                <div>\n                    <h3>Sign Up Test!</h3>\n                    <label >email</label>\n                    <input type=\"text\" onKeyUp={(e) =>{email = e.target.value;}}/>\n                    <label >username</label>\n                    <input type=\"text\" onKeyUp={(e) =>{username = e.target.value;}} />\n                    <label >password</label>\n                    <input type=\"text\" onKeyUp={(e) =>{password = e.target.value;}} />\n                    <button onClick={()=>{this.signupTest(email,username,password);}}>Test</button>\n                </div>\n                <div>\n                    <h3>Login Test!</h3>\n                    <label >email</label>\n                    <input type=\"text\" onKeyUp={(e) =>{email = e.target.value;}} />\n                    <label >username</label>\n                    <input type=\"text\" onKeyUp={(e) =>{username = e.target.value;}} />\n                    <label >password</label>\n                    <input type=\"text\" onKeyUp={(e) =>{password = e.target.value;}} />\n                    <button onClick={()=>{this.loginTest(email,username,password);}}>Test</button>\n                </div>\n                <div>\n                    <h3>Save Entry Test!</h3>\n                    <label >email</label>\n                    <input type=\"text\" onKeyUp={(e) =>{email = e.target.value;}} />\n                    <label >username</label>\n                    <input type=\"text\" onKeyUp={(e) =>{username = e.target.value;}} />\n                    <label >entry</label>\n                    <input type=\"text\" onKeyUp={(e) =>{entry = e.target.value;}} />\n                    <label >time</label>\n                    <input type=\"text\" onKeyUp={(e) =>{time = e.target.value;}} />\n                    <label >longitude</label>\n                    <input type=\"text\" onKeyUp={(e) =>{longitude = e.target.value;}} />\n                    <label >latitude</label>\n                    <input type=\"text\" onKeyUp={(e) =>{latitude = e.target.value;}} />\n                    <button onClick={()=>{this.saveEntryTest(email,username,entry,time,longitude,latitude);}}>Test</button>\n                </div>\n                <div>\n                    <h3>Get Entry Test!</h3>\n                    <label >email</label>\n                    <input type=\"text\" onKeyUp={(e) =>{email = e.target.value;}} />\n                    <label >username</label>\n                    <input type=\"text\" onKeyUp={(e) =>{username = e.target.value;}} />\n                    <button onClick={()=>{this.getEntriesTest(email,username);}}>Test</button>\n                </div>\n                <div>\n                    <h3>Result!</h3>\n                    <p>signupResult : {this.state.signupResult}</p>\n                    <p>loginResult : {this.state.loginResult}</p>\n                    <p>saveEntryResult : {this.state.saveEntryResult}</p>\n                    <p>getEntriesResul : {this.state.getEntriesResul}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BackendTest;\n","import React, { Component } from 'react';\nimport SwipeableViews from 'react-swipeable-views';\n// ref for swipping :  https://react-swipeable-views.com/\nclass Swiper extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = \n        {\n            ready:false\n        };\n              \n    }\n    render() \n    {\n        let key = 0;\n        let entries = this.props.entries.map( x => { return (<div key={key++} className=\"page\">{x.entry}</div>); });//JSON.stringify(x)\n        console.log(entries);\n        return (\n            <div>\n                <SwipeableViews>\n                    <div className=\"page\">\n                    start\n                    </div>\n                    {entries}\n                </SwipeableViews>\n            </div>\n        );\n    }\n}\n\nexport default Swiper;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BackendTest from './component/BackendTest';\nimport Swiper from './component/Swiper';\n\nclass App extends Component {\n  constructor(props)\n  {\n    super(props);\n    this.state = \n    {\n      entries:[]\n    };\n    this.setEntries = this.setEntries.bind(this);\n  }\n  setEntries(entries = [])\n  {\n    this.setState({entries:entries});\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <BackendTest setEntries={this.setEntries}/>\n          <Swiper entries={this.state.entries} />\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}